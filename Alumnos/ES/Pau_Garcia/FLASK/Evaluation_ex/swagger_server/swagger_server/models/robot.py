# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Robot(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sensor_id: str=None, _date: datetime=None, unit: str=None, temperature: float=None):  # noqa: E501
        """Robot - a model defined in Swagger

        :param sensor_id: The sensor_id of this Robot.  # noqa: E501
        :type sensor_id: str
        :param _date: The _date of this Robot.  # noqa: E501
        :type _date: datetime
        :param unit: The unit of this Robot.  # noqa: E501
        :type unit: str
        :param temperature: The temperature of this Robot.  # noqa: E501
        :type temperature: float
        """
        self.swagger_types = {
            'sensor_id': str,
            '_date': datetime,
            'unit': str,
            'temperature': float
        }

        self.attribute_map = {
            'sensor_id': 'sensor_id',
            '_date': 'date',
            'unit': 'unit',
            'temperature': 'temperature'
        }
        self._sensor_id = sensor_id
        self.__date = _date
        self._unit = unit
        self._temperature = temperature

    @classmethod
    def from_dict(cls, dikt) -> 'Robot':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Robot of this Robot.  # noqa: E501
        :rtype: Robot
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensor_id(self) -> str:
        """Gets the sensor_id of this Robot.


        :return: The sensor_id of this Robot.
        :rtype: str
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id: str):
        """Sets the sensor_id of this Robot.


        :param sensor_id: The sensor_id of this Robot.
        :type sensor_id: str
        """

        self._sensor_id = sensor_id

    @property
    def _date(self) -> datetime:
        """Gets the _date of this Robot.


        :return: The _date of this Robot.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this Robot.


        :param _date: The _date of this Robot.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def unit(self) -> str:
        """Gets the unit of this Robot.


        :return: The unit of this Robot.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this Robot.


        :param unit: The unit of this Robot.
        :type unit: str
        """

        self._unit = unit

    @property
    def temperature(self) -> float:
        """Gets the temperature of this Robot.


        :return: The temperature of this Robot.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this Robot.


        :param temperature: The temperature of this Robot.
        :type temperature: float
        """

        self._temperature = temperature
